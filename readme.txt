=========================
	姓名：BEAR
	学号：.
	班级：17级4班（软件技术方向）
	课程：编译原理实践
=========================


=========================
	软件简介
=========================
这是一款简约的Mini C语言IDE，主要包含新建文件、打开文件、保存文件、编译、运行、显示/保存语法树和目标代码的功能，简单易用。
Mini C是C语言的一个子集，仅包含C语言极少部分的、基本的特性，坦诚地说，它一点也不实用。但开发这款IDE的目的不在于此，而是
加深对编译过程的了解，因此重点在于这款软件的源码而不在于这款软件本身。源码放在source_code文件夹下，使用开发平台是Qt5（C++），
可以使用Qt Creator打开，也可以用其他文本编辑器打开，但有可能因为字符集问题而显示中文乱码，另存为UTF-8格式即可。若要创建工程，
除了将源码复制到项目工程目录下之外，还需要添加依赖QScintilla（一个代码编辑器插件，这里用的是2.11版本）。
本项目只用于学习交流，不用于其他用途。



=========================
	文件清单 
=========================

source_code-------------------------------- Mini C编译程序源码
	--mini_c.h			定义Mini_C类，包含整个编译过程和虚拟机涉及到的数据成员和函数成员，
				还有用户交互界面所需的函数和变量。
	--global.h			定义全局数据结构、变量和常量等
	--keyword_hash.h		由GNU的gperf工具生成的完美哈希函数，用于词法分析
	--ui_mini_c.h		拖拽式界面设计后自动生成的UI文件

	--mini_c.cpp		负责系统初始化（UI初始化，一些变量初始化）；
				实现用户交互界面相关的函数
	--main.cpp		实现程序的main函数，主要是创建一个Mini_C类，使程序开始运行，
				实际上是一个形式化的main函数，创建工程时自动生成。
	--util.cpp			实现了编译过程中使用到的一些工具函数，
				如：显示语法树等
	--scan.cpp		负责实现词法分析部分的函数
	--parse.cpp		负责实现语法分析部分的函数
	--symboltable.cpp		负责实现符号检查部分的函数
	--typecheck.cpp		负责实现类型检查部分的函数
	--codegen.cpp		负责实现目标代码生成部分的函数
	--virtualmachine.cpp	负责实现虚拟机部分的函数

doc--------------------------------------------实验相关的文档
	--DFA/词法DFA.vsd		词法分析DFA图，用visio可以打开
	--Gperf/			包含gperf程序的输入文件和输出文件
	--项目设计报告书.docx	项目设计报告书
	--软件使用说明书.docx	软件使用说明书

exe--------------------------------------------可执行程序文件夹
	--Testcase/		测试用例文件夹。
				其中编号为01-10的测试用例与词法分析和语法分析相关，
				编号为11-18的测试用例与语义分析相关，
				testcase_sample1.txt是项目指导书中的测试用例1，
				testcase_sample2.txt是项目指导书中的测试用例2。
				语法树文件和目标代码文件在编译过程中自动生成，文件名格式如下：
				源代码文件名 + _SYNTAXTREE或_CODE + .txt
	--Minic_compiler.exe	可执行程序
	其他文件是动态链接库和其他必要文件。




		