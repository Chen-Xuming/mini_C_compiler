/*****************************************************
*	文件名:		keyword_hash.h
*	创建者：        BEAR
*	创建日期：	2020/4/9
*	最后修改：	2020/4/9
******************************************************
*	内容描述：
*		keyword_hash.h 提供一个关键字判断函数reservedLookup，
*		用于词法分析中判断一个ID是否是关键字，算法由
*		完美哈希函数生成程序Gperf（Windows 3.0.1版）提供。
*
*		Gperf是教材中介绍的一款完美哈希函数生成器，
*		使用它的原因有二：
*		① 判定关键字时使用哈希表比线性搜索效率高。
*		② 关键字集合是静态集合，因此容易生成无冲突哈希表。
*
*		输入文件和输出文件放在doc/gperf文件夹中，此外，
*		这里对生成的代码作了一些修改，但不影响其功能。
******************************************************
*	修改记录：
*	2020/4/20	修复一处可能访问空指针的错误。
*   2020/4/25   将文件迁移至Qt平台
*******************************************************/

#ifndef KEYWORD_HASH_H
#define KEYWORD_HASH_H

#include "globals.h"

#define TOTAL_KEYWORDS 6
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 6
#define MIN_HASH_VALUE 2
#define MAX_HASH_VALUE 9

// 用于求哈希值
static unsigned char asso_values[256] = {
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  5, 10, 10, 10,  0, 10, 10, 10, 10, 10, 10, 10, 10,  0, 10, 10, 10,  0,  0,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};


// 哈希表 key(index)-name
static char *name[] = {NULL, NULL, "if", "int", "void", "while", "return", NULL, NULL, "else"};

static TokenType token[] = {ERROR, ERROR, IF, INT, VOID, WHILE, RETURN, ERROR, ERROR, ELSE};


/*
 *   给定字符串判断是否是关键字
 */
static TokenType reservedLookup(char * s) {
    if (s != NULL) {
        int len = strlen(s);
        int key = len + asso_values[(unsigned char)s[0]];
        if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
            if (key <= MAX_HASH_VALUE && key >= 0) {
                char *word = name[key];
                if(word == NULL) return ID;
                if (*s == *word && !strcmp(s + 1, word + 1))
                    return token[key];
            }
        }
    }
    return ID;
}

#endif // !KEYWORD_HASH_H

